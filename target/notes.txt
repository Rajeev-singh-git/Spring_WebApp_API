Step 2

ComponentScan defines where it should look for component
 Service class is outside com.in28minutes.springboot package so it 
 won't be scanned automatically. So we need to add ComponentScan
 annotation telling  SpringBoot where to look for component.
 It is inside sub-package of ("com.in28minutes") so we added that.
 
 @SpringBootApplication adds @ComponentScan by default to current 
 package which in our case is (com.in28minutes.springboot;)
 



Step 4

Spring Boot manages version for all it's dependencies automatically.
If we upgrade spring boot version, it will automatically upgrade
version of all it's  dependencies.
We can see details in "Spring Boot Starter Parent"
We can also, override dependency version in POM.XML properties. 
In our code we have overridden java version to 13.


Step 5

Spring Boot vs Spring
What Spring Boot is not?

Spring Boot vs Spring
Spring
Spring is just a dependency injection framework. Spring focuses on the "plumbing" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.
First half of the 2000 decade! EJBs
EJBs were NOT easy to develop.
Write a lot of xml and plumbing code to get EJBs running
Impossible to Unit Test
Alternative - Writing simple JDBC Code involved a lot of plumbing
Spring framework started with aim of making Java EE development simpler.

Goals
	Make applications testable. i.e. easier to write unit tests
	Reduce plumbing code of JDBC and JMS
	Simple architecture. Minus EJB.
	Integrates well with other popular frameworks.


Applications with Spring Framework
Over the next few years, a number of applications were developed with Spring Framework
Testable but
Lot of configuration (XML and Java)
Developing Spring Based application need configuration of a lot of beans!
Integration with other frameworks need configuration as well!
In the last few years, focus is moving from monolith applications to microservices. We need to be able to start project quickly. Minimum or Zero start up time
Framework Setup
Deployment - Configurability
Logging, Transaction Management
Monitoring
Web Server Configuration


Spring Boot
Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.
We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss.
Example Problem Statements
You want to add Hibernate to your project. You dont worry about configuring a data source and a session factory. I will do if for you!

Goals
    Provide quick start for projects with Spring.
	Be opinionated but provide options.
	Provide a range of non-functional features that are common to large classes of projects (e.g. embedded servers, security, metrics, health checks, externalized configuration).
	What Spring Boot is NOT?
	It’s not an app or a web server
	Does not implement any specific framework - for example, JPA or JMS
	Does not generate code

What Spring Boot is NOT?
 It’s not an app or a web server
 Does not implement any specific framework - for example, JPA or JMS
 Does not generate code
 
 
 
 Step 7
 
Even though data is not in JSON Format, how it is displayed in JSON format in browser?

Spring Boot does this for us automatically using "Message Converter"

List<Question> Object -> JSON
JSON -> Object
Jackson data Bind



Step 8

GET    - Retrieve details of a resource "/surveys/{surveyId}/questions"
POST   - Create a new resource          "/surveys/{surveyId}/questions"
PUT    - Update an existing resource    "/surveys/{surveyId}/questions/{questionId}"
PATCH  - Update part of a resource     
DELETE - Delete a resource             "/surveys/{surveyId}/questions/{questionId}"



Step 9
    I hate the fact that I've to stop and start the server each time. Can somebody save me?
	Yeah. Spring Boot Developer Tools
	By default, any entry on the classpath that points to a folder will be monitored for changes.
	These will not trigger restart - /META-INF/maven, /META-INF/resources ,/resources ,/static ,/public or /templates
	Folders can be configured : spring.devtools.restart.exclude=static/,public/
	Additional Paths : spring.devtools.restart.additional-paths
	LiveReload http://livereload.com/extensions/
	Technology in progress!! So, expect a few problems!
	

Step 10

	PostMapping URL = http://localhost:8080/surveys/Survey1/questions
	
	Format =
	{
    "description":"IT hub of the world",
     "correctAnswer":"India",
     "options":["India",
            "Russia",
            "United States",
            "China"
            ]
	}
	

Step 11

   Understand Content Negotiation
     We in postman, can customize in which format data we want
     For JSON springboot automatically   converts and send ..but for other we need dependencies
     We will add dependency for XML format
    Content Negotiation is clent asking  server data in specific format
   Accept:application/xml
   In postman
   Key : Accept
   Value : application/xml
   Deliver XML Responses from the REST Services
   http://localhost:8080/surveys/Survey1/questions/
   
